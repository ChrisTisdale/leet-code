# CMakeList.txt : Top-level CMake project file, do global configuration
# and include sub-projects here.
#
cmake_minimum_required (VERSION 3.8)

# Enable Hot Reload for MSVC compilers if supported.
if (POLICY CMP0141)
  cmake_policy(SET CMP0141 NEW)
  set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "$<IF:$<AND:$<C_COMPILER_ID:MSVC>,$<CXX_COMPILER_ID:MSVC>>,$<$<CONFIG:Debug,RelWithDebInfo>:EditAndContinue>,$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>>")
endif()

project("leet-code")

set(gtest_force_shared_crt on)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

option(PACKAGE_TESTS "Build the tests" ON)
if(PACKAGE_TESTS)
    include(GoogleTest)
    add_subdirectory("${PROJECT_SOURCE_DIR}/externals/googletest" "externals/googletest")
    mark_as_advanced(
        BUILD_GMOCK BUILD_GTEST BUILD_SHARED_LIBS
        gmock_build_tests gtest_build_samples gtest_build_tests
        gtest_disable_pthreads gtest_force_shared_crt gtest_hide_internal_symbols
    )
    
    set_target_properties(gtest PROPERTIES FOLDER extern)
    set_target_properties(gtest_main PROPERTIES FOLDER extern)
    set_target_properties(gmock PROPERTIES FOLDER extern)
    set_target_properties(gmock_main PROPERTIES FOLDER extern)
endif()

macro(package_add_test TESTNAME)
    if(PACKAGE_TESTS)
        # create an executable in which the tests will be stored
        add_executable(${TESTNAME} ${ARGN})
        # link the Google test infrastructure, mocking library, and a default main function to
        # the test executable.  Remove g_test_main if writing your own main function.
        target_link_libraries(${TESTNAME} gtest gmock gtest_main)
        # gtest_discover_tests replaces gtest_add_tests,
        # see https://cmake.org/cmake/help/v3.10/module/GoogleTest.html for more options to pass to it
        gtest_discover_tests(${TESTNAME}
            # set a working directory so your project root so that you can find test data via paths relative to the project root
            WORKING_DIRECTORY ${PROJECT_DIR}
            PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY "${PROJECT_DIR}"
        )
        set_target_properties(${TESTNAME} PROPERTIES FOLDER tests)
    endif()
endmacro()

if(PACKAGE_TESTS)
    enable_testing()
endif()

add_subdirectory("src/list_node_cpp")
add_subdirectory("src/add_two_numbers_cpp")
add_subdirectory("src/binary_search_cpp")
add_subdirectory("src/integer_to_roman_cpp")
add_subdirectory("src/letter_combinations_numbers_cpp")
add_subdirectory("src/longest_no_repeat_cpp")
add_subdirectory("src/pairs_spells_potions_cpp")
add_subdirectory("src/remove_nth_node_cpp")
add_subdirectory("src/reverse_integer_cpp")
add_subdirectory("src/reverse_linked_list_cpp")
add_subdirectory("src/roman_to_integer_cpp")
add_subdirectory("src/two_sum_cpp")
add_subdirectory("src/valid_parentheses_cpp")
add_subdirectory("src/valid_sudoku_cpp")
